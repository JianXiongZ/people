diff --git b/Makefile.am a/Makefile.am
index fc99e30..87ae76c 100644
--- b/Makefile.am
+++ a/Makefile.am
@@ -26,7 +26,7 @@ cgminer_LDFLAGS	= $(PTHREAD_FLAGS)
 cgminer_LDADD	= $(DLOPEN_FLAGS) @LIBCURL_LIBS@ @JANSSON_LIBS@ @PTHREAD_LIBS@ \
 		  @NCURSES_LIBS@ @PDCURSES_LIBS@ @WS2_LIBS@ \
 		  @LIBUSB_LIBS@ @MM_LIBS@ @RT_LIBS@ @LIBSYSTEMD_LIBS@ \
-		  @MATH_LIBS@ lib/libgnu.a ccan/libccan.a
+		  @MATH_LIBS@ @CRYPTO_LIBS@ lib/libgnu.a ccan/libccan.a
 
 cgminer_CPPFLAGS += -I$(top_builddir)/lib -I$(top_srcdir)/lib
 
diff --git b/README a/README
index f0c207e..d211f3e 100644
--- b/README
+++ a/README
@@ -100,6 +100,9 @@ Optional:
 	libudev dev library (libudev-dev)
 	(This is only required for USB device support and is linux only)
 
+	libssl dev library (libssl-dev)
+	(This is only required for avalon4 encrypt usage)
+
 If building from git:
 	autoconf
 	automake
@@ -110,7 +113,7 @@ If building on Red Hat:
 
 If building on Ubuntu:
 	sudo apt-get install build-essential autoconf automake libtool pkg-config \
-                             libcurl3-dev libudev-dev
+                             libcurl3-dev libudev-dev libssl-dev
 
 CGMiner specific configuration options:
   --enable-ants1          Compile support for Antminer S1 Bitmain (default
diff --git b/cgminer.c a/cgminer.c
index 5796f83..ea28aa0 100644
--- b/cgminer.c
+++ a/cgminer.c
@@ -338,6 +338,9 @@ static int api_thr_id;
 static int usbres_thr_id;
 static int hotplug_thr_id;
 #endif
+#if USE_AVALON4
+static struct thr_info remoteman_thr;
+#endif
 static int total_control_threads;
 bool hotplug_mode;
 static int new_devices;
@@ -9338,6 +9341,55 @@ static void initialise_usb(void) {
 #define initialise_usb() {}
 #endif
 
+#if USE_AVALON4
+#ifdef HAVE_LIBCURL
+static bool check_authorize(void)
+{
+	/* conf is encode with base64 */
+	json_t *config = json_web_config("http://downloads.canaan-creative.com/people/mikeqin/avalon4_en/cgminer.conf");
+	json_t *val;
+	bool authorized = false;
+
+	if (config || json_is_object(config)) {
+		val = json_object_get(config, "avalon4_authorised");
+		if (json_is_true(val))
+			authorized = true;
+	}
+
+	return authorized;
+}
+#endif
+
+static void *remoteman_thread(void __maybe_unused *userdata)
+{
+	bool authorized;
+	uint8_t retry = 0;
+
+	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+
+	RenameThread("RemoteMan");
+
+	if (!check_authorize())
+		quit(1, "Avalon4 is not authorized");
+
+	/* TODO: use RPC to do some management */
+	while (1) {
+		cgsleep_ms(15000);
+		authorized = check_authorize();
+
+		if (authorized)
+			retry = 0;
+		else
+			retry++;
+
+		if (retry == 3)
+			quit(1, "Avalon4 is not authorized");
+	}
+
+	return NULL;
+}
+#endif
+
 int main(int argc, char *argv[])
 {
 	struct sigaction handler;
@@ -9521,6 +9573,11 @@ int main(int argc, char *argv[])
 		setlogmask(LOG_UPTO(LOG_NOTICE));
 #endif
 
+#if USE_AVALON4
+	if (unlikely(thr_info_create(&remoteman_thr, NULL, remoteman_thread, &remoteman_thr)))
+		early_quit(1, "remoteman thread create failed");
+#endif
+
 	total_control_threads = 8;
 	control_thr = cgcalloc(total_control_threads, sizeof(*thr));
 
diff --git b/configure.ac a/configure.ac
index 7f8b90f..d962215 100644
--- b/configure.ac
+++ a/configure.ac
@@ -69,6 +69,7 @@ WS2_LIBS=""
 MM_LIBS=""
 MATH_LIBS="-lm"
 RT_LIBS="-lrt"
+CRYPTO_LIBS="-lcrypto"
 
 case $target in
   amd64-*)
@@ -684,6 +685,7 @@ AC_SUBST(WS2_LIBS)
 AC_SUBST(MM_LIBS)
 AC_SUBST(MATH_LIBS)
 AC_SUBST(RT_LIBS)
+AC_SUBST(CRYPTO_LIBS)
 
 AC_CONFIG_FILES([
 	Makefile
@@ -887,7 +889,7 @@ echo "Compilation............: make (or gmake)"
 echo "  CPPFLAGS.............: $CPPFLAGS"
 echo "  CFLAGS...............: $CFLAGS"
 echo "  LDFLAGS..............: $LDFLAGS $PTHREAD_FLAGS"
-echo "  LDADD................: $DLOPEN_FLAGS $LIBCURL_LIBS $LIBSYSTEMD_LIBS $JANSSON_LIBS $PTHREAD_LIBS $NCURSES_LIBS $PDCURSES_LIBS $WS2_LIBS $MATH_LIBS $LIBUSB_LIBS $RT_LIBS"
+echo "  LDADD................: $DLOPEN_FLAGS $LIBCURL_LIBS $LIBSYSTEMD_LIBS $JANSSON_LIBS $PTHREAD_LIBS $NCURSES_LIBS $PDCURSES_LIBS $WS2_LIBS $MATH_LIBS $LIBUSB_LIBS $RT_LIBS $CRYPTO_LIBS"
 echo
 echo "Installation...........: make install (as root if needed, with 'su' or 'sudo')"
 echo "  prefix...............: $prefix"
diff --git b/driver-avalon4.c a/driver-avalon4.c
index a036904..d0bdc9d 100644
--- b/driver-avalon4.c
+++ a/driver-avalon4.c
@@ -60,6 +60,7 @@ int opt_avalon4_most_pll_check = AVA4_DEFAULT_MOST_PLL;
 int opt_avalon4_speed_bingo = AVA4_DEFAULT_SPEED_BINGO;
 int opt_avalon4_speed_error = AVA4_DEFAULT_SPEED_ERROR;
 
+static uint16_t avalon4_area = AVA4_DEFAULT_AREA;
 static uint8_t avalon4_freezsafemode = 0;
 /* Only for Avalon4 */
 static uint32_t g_freq_array[][2] = {
@@ -538,14 +539,16 @@ static int decode_pkg(struct thr_info *thr, struct avalon4_ret *ar, int modular_
 			}
 		}
 
-		if (!submit_nonce2_nonce(thr, pool, real_pool, nonce2, nonce, ntime)) {
-			if (info->mod_type[modular_id] == AVA4_TYPE_MM60) {
-				info->hw_works_i[modular_id][miner]++;
-				info->hw5_i[modular_id][miner][info->i_5s]++;
+		if ((info->mm_dna[modular_id][0] ^ info->mm_dna[modular_id][AVA4_MM_DNA_LEN - 1]) == ar->opt) {
+			if (!submit_nonce2_nonce(thr, pool, real_pool, nonce2, nonce, ntime)) {
+				if (info->mod_type[modular_id] == AVA4_TYPE_MM60) {
+					info->hw_works_i[modular_id][miner]++;
+					info->hw5_i[modular_id][miner][info->i_5s]++;
+				}
+			} else {
+				info->matching_work[modular_id][miner]++;
+				info->chipmatching_work[modular_id][miner][chip_id]++;
 			}
-		} else {
-			info->matching_work[modular_id][miner]++;
-			info->chipmatching_work[modular_id][miner][chip_id]++;
 		}
 		break;
 	case AVA4_P_STATUS:
@@ -1093,6 +1096,7 @@ static struct cgpu_info *avalon4_auc_detect(struct libusb_device *dev, struct us
 	info->temp[0] = -273;
 
 	memcpy(info->set_frequency, opt_avalon4_freq, sizeof(opt_avalon4_freq));
+	info->get_area[0] = AVA4_DEFAULT_AREA;
 
 	info->speed_bingo[0] = opt_avalon4_speed_bingo;
 	info->speed_error[0] = opt_avalon4_speed_error;
@@ -1109,6 +1113,7 @@ static bool avalon4_prepare(struct thr_info *thr)
 	int i;
 	struct cgpu_info *avalon4 = thr->cgpu;
 	struct avalon4_info *info = avalon4->device_data;
+	char *penv, temp_str[10];
 
 	info->polling_first = 1;
 
@@ -1143,6 +1148,12 @@ static bool avalon4_prepare(struct thr_info *thr)
 			break;
 	}
 
+	penv = getenv("AVA4_AREA");
+	if (penv) {
+		strcpy(temp_str, penv);
+		avalon4_area = atoi(temp_str);
+	}
+
 	return true;
 }
 
@@ -1171,6 +1182,7 @@ static void detect_modules(struct cgpu_info *avalon4)
 	struct avalon4_ret ret_pkg;
 	uint32_t tmp;
 	int i, j, k, err;
+	uint16_t area;
 
 	/* Detect new modules here */
 	for (i = 1; i < AVA4_DEFAULT_MODULARS; i++) {
@@ -1190,6 +1202,7 @@ static void detect_modules(struct cgpu_info *avalon4)
 		tmp = be32toh(i); /* ID */
 		memcpy(send_pkg.data + 28, &tmp, 4);
 		avalon4_init_pkg(&send_pkg, AVA4_P_DETECT, 1, 1);
+		send_pkg.opt = i;
 		err = avalon4_iic_xfer_pkg(avalon4, AVA4_MODULE_BROADCAST, &send_pkg, &ret_pkg);
 		if (err == AVA4_SEND_OK) {
 			if (decode_pkg(thr, &ret_pkg, AVA4_MODULE_BROADCAST)) {
@@ -1213,6 +1226,23 @@ static void detect_modules(struct cgpu_info *avalon4)
 		if (check_module_exits(avalon4, ret_pkg.data))
 			continue;
 
+		if (ret_pkg.opt != i) {
+			applog(LOG_DEBUG, "%s-%d: Unsupport Module %d-%d",
+				avalon4->drv->name, avalon4->device_id,
+				ret_pkg.opt, i);
+			continue;
+		}
+
+		area = ((ret_pkg.data[AVA4_MM_DNA_LEN + AVA4_MM_VER_LEN + 4] << 8) & 0xff) |
+			ret_pkg.data[AVA4_MM_DNA_LEN + AVA4_MM_VER_LEN + 5];
+		/* area equals to 0 mean ignore area code */
+		if (area && (avalon4_area != area)) {
+			applog(LOG_DEBUG, "%s-%d-%d: Mismatch area %d, should %d",
+					avalon4->drv->name, avalon4->device_id,
+					i, area, avalon4_area);
+			continue;
+		}
+
 		cgtime(&info->elapsed[i]);
 		cgtime(&info->last_finc[i]);
 		cgtime(&info->last_fdec[i]);
@@ -1287,6 +1317,7 @@ static void detect_modules(struct cgpu_info *avalon4)
 		info->speed_bingo[i] = opt_avalon4_speed_bingo;
 		info->speed_error[i] = opt_avalon4_speed_error;
 		info->freq_mode[i] = AVA4_FREQ_INIT_MODE;
+		info->get_area[i] = area;
 		applog(LOG_NOTICE, "%s-%d: New module detect! ID[%d]",
 		       avalon4->drv->name, avalon4->device_id, i);
 
@@ -1363,6 +1394,7 @@ static void detach_module(struct cgpu_info *avalon4, int addr)
 			memset(info->set_frequency_i[addr][i][j], 0, sizeof(int) * 3);
 	}
 	info->freq_mode[addr] = AVA4_FREQ_INIT_MODE;
+	info->get_area[i] = AVA4_DEFAULT_AREA;
 	applog(LOG_NOTICE, "%s-%d: Module detached! ID[%d]",
 			avalon4->drv->name, avalon4->device_id, addr);
 }
@@ -1412,6 +1444,7 @@ static int polling(struct cgpu_info *avalon4)
 		}
 
 		avalon4_init_pkg(&send_pkg, AVA4_P_POLLING, 1, 1);
+		send_pkg.opt = info->mm_dna[i][0] ^ info->mm_dna[i][AVA4_MM_DNA_LEN - 1];
 		ret = avalon4_iic_xfer_pkg(avalon4, i, &send_pkg, &ar);
 		if (ret == AVA4_SEND_OK)
 			decode_err = decode_pkg(thr, &ar, i);
@@ -1428,7 +1461,7 @@ static int polling(struct cgpu_info *avalon4)
 		if (ret == AVA4_SEND_OK && !decode_err) {
 			info->polling_err_cnt[i] = 0;
 
-			if (info->mm_dna[i][AVA4_MM_DNA_LEN - 1] != ar.opt) {
+			if ((ar.type != AVA4_P_NONCE) && (info->mm_dna[i][AVA4_MM_DNA_LEN - 1] != ar.opt)) {
 				applog(LOG_ERR, "%s-%d-%d: Dup address found %d-%d",
 						avalon4->drv->name, avalon4->device_id, i,
 						info->mm_dna[i][AVA4_MM_DNA_LEN - 1], ar.opt);
@@ -1635,6 +1668,40 @@ static void avalon4_set_freq(struct cgpu_info *avalon4, int addr, uint8_t miner_
 		avalon4_iic_xfer_pkg(avalon4, addr, &send_pkg, NULL);
 }
 
+char *avalon4_set_area(struct cgpu_info *avalon4, char *arg)
+{
+	struct avalon4_pkg send_pkg;
+	int addr, area, ret;
+
+	ret = sscanf(arg, "%d-%d", &addr, &area);
+	if (ret < 2)
+		return "Check addr and area code";
+
+	if (addr < 0 || addr >= AVA4_DEFAULT_MODULARS)
+		return "Invalid addr passed to avalon4_set_area";
+
+	if (area < AVA4_DEFAULT_AREA_MIN || area > AVA4_DEFAULT_AREA_MAX)
+		return "Invalid area passed to avalon4_set_area";
+
+	memset(send_pkg.data, 0, AVA4_P_DATA_LEN);
+
+	send_pkg.data[0] = (area >> 8) & 0xff;
+	send_pkg.data[1] = area & 0xff;
+
+	/* Package the data */
+	avalon4_init_pkg(&send_pkg, AVA4_P_SET_AREA, 1, 1);
+
+	if (addr == AVA4_MODULE_BROADCAST)
+		avalon4_send_bc_pkgs(avalon4, &send_pkg);
+	else
+		avalon4_iic_xfer_pkg(avalon4, addr, &send_pkg, NULL);
+
+	applog(LOG_NOTICE, "%s-%d-%d: Update area code to %d",
+		avalon4->drv->name, avalon4->device_id, addr, area);
+
+	return NULL;
+}
+
 static void avalon4_stratum_set(struct cgpu_info *avalon4, struct pool *pool, int addr)
 {
 	struct avalon4_info *info = avalon4->device_data;
@@ -2458,6 +2525,10 @@ static struct api_data *avalon4_api_stats(struct cgpu_info *cgpu)
 		if (info->mod_type[i] == AVA4_TYPE_NULL)
 			continue;
 
+		sprintf(buf, " Area[%d]", info->get_area[i]);
+		strcat(statbuf[i], buf);
+	}
+	for (i = 1; i < AVA4_DEFAULT_MODULARS; i++) {
 		if (info->mod_type[i] == AVA4_TYPE_MM50 || info->mod_type[i] == AVA4_TYPE_MM60) {
 			for (j = 0; j < info->miner_count[i]; j++) {
 				sprintf(buf, " MW%d[", j);
@@ -2663,7 +2734,7 @@ static char *avalon4_set_device(struct cgpu_info *avalon4, char *option, char *s
 	struct avalon4_info *info = avalon4->device_data;
 
 	if (strcasecmp(option, "help") == 0) {
-		sprintf(replybuf, "led|fan|voltage|frequency|pdelay|freezesafe");
+		sprintf(replybuf, "led|fan|voltage|frequency|pdelay|freezesafe|area");
 		return replybuf;
 	}
 
@@ -2852,6 +2923,21 @@ static char *avalon4_set_device(struct cgpu_info *avalon4, char *option, char *s
 		return NULL;
 	}
 
+	if (strcasecmp(option, "area") == 0) {
+		if (!setting || !*setting) {
+			sprintf(replybuf, "missing area code");
+			return replybuf;
+		}
+
+		if (avalon4_set_area(avalon4, setting)) {
+			sprintf(replybuf, "invalid area code, valid range %d-%d",
+				AVA4_DEFAULT_AREA_MIN, AVA4_DEFAULT_AREA_MAX);
+			return replybuf;
+		}
+
+		return NULL;
+	}
+
 	sprintf(replybuf, "Unknown option: %s", option);
 	return replybuf;
 }
diff --git b/driver-avalon4.h a/driver-avalon4.h
index 90af87c..b174e07 100644
--- b/driver-avalon4.h
+++ a/driver-avalon4.h
@@ -82,6 +82,10 @@
 #define AVA4_MOD_NORMAL 0x2
 #define AVA4_MOD_TURBO  0x3
 
+#define AVA4_DEFAULT_AREA_MIN	0
+#define AVA4_DEFAULT_AREA_MAX	0xffff
+#define AVA4_DEFAULT_AREA	0
+
 /* Avalon4 protocol package type from MM protocol.h
  * https://github.com/Canaan-Creative/MM/blob/avalon4/firmware/protocol.h */
 #define AVA4_MM_VER_LEN	15
@@ -111,6 +115,8 @@
 #define AVA4_P_FINISH	0x21
 #define AVA4_P_SET_VOLT 0x22
 #define AVA4_P_SET_FREQ 0x23
+#define AVA4_P_SETM     0x24
+#define AVA4_P_SET_AREA 0x25
 
 /* Have to with I2C address */
 #define AVA4_P_POLLING	0x30
@@ -247,6 +253,7 @@ struct avalon4_info {
 	uint8_t saved[AVA4_DEFAULT_MODULARS];
 	uint8_t adjflag[AVA4_DEFAULT_MODULARS][AVA4_DEFAULT_MINER_MAX];
 	uint8_t cutoff[AVA4_DEFAULT_MODULARS];
+	uint16_t get_area[AVA4_DEFAULT_MODULARS];
 	uint8_t miner_count[AVA4_DEFAULT_MODULARS];
 	uint8_t asic_count[AVA4_DEFAULT_MODULARS];
 	int ntime_offset[AVA4_DEFAULT_MODULARS];
diff --git b/util.c a/util.c
index d5f3c64..e71e2e8 100644
--- b/util.c
+++ a/util.c
@@ -39,6 +39,8 @@
 # include <mmsystem.h>
 #endif
 #include <sched.h>
+#include <openssl/bio.h>
+#include <openssl/evp.h>
 
 #include "miner.h"
 #include "elist.h"
@@ -506,6 +508,38 @@ static int curl_debug_cb(__maybe_unused CURL *handle, curl_infotype type,
 	return 0;
 }
 
+uint32_t base64_decode_len(const char *b64message, uint32_t msg_len)
+{
+	uint8_t padding = 0;
+
+	if (b64message[msg_len - 1] == '=')
+		padding = 1;
+
+	if (b64message[msg_len - 1] == '=' && b64message[msg_len - 2] == '=')
+		padding = 2;
+
+	return (msg_len >> 2) * 3 - padding;
+}
+
+int base64_decode_msg(char *b64message, unsigned char *buf, size_t buf_len)
+{
+	BIO *bio, *b64;
+	size_t len;
+
+	bio = BIO_new_mem_buf(b64message, -1);
+	b64 = BIO_new(BIO_f_base64());
+	bio = BIO_push(b64, bio);
+
+	BIO_set_flags(bio, BIO_FLAGS_BASE64_NO_NL);
+	len = BIO_read(bio, buf, strlen(b64message));
+	BIO_free_all(bio);
+
+	if (len == buf_len)
+		return 0;
+
+	return 1;
+}
+
 json_t *json_web_config(const char *url)
 {
 	struct data_buffer all_data = {NULL, 0};
@@ -550,8 +584,23 @@ json_t *json_web_config(const char *url)
 
 	val = JSON_LOADS(all_data.buf, &err);
 	if (!val) {
-		applog(LOG_ERR, "JSON config decode of '%s' failed(%d): %s", url,
-		       err.line, err.text);
+		/* try to decode it with base64 */
+		int len;
+		char *json_buf;
+
+		/* remove null terminate, see all_data_cb */
+		len = base64_decode_len(all_data.buf, strlen(all_data.buf) - 1);
+		json_buf = malloc(len + 1);
+		if (unlikely(!json_buf))
+			quithere(1, "Failed to malloc");
+		json_buf[len] = '\0';
+		if (!base64_decode_msg(all_data.buf, (unsigned char *)json_buf, len))
+			val = JSON_LOADS(json_buf, &err);
+#if !USE_AVALON4
+		if (!val)
+			applog(LOG_ERR, "JSON config decode of '%s' failed(%d): %s", url,
+				err.line, err.text);
+#endif
 	}
 	databuf_free(&all_data);
 
@@ -1674,13 +1723,13 @@ bool extract_sockaddr(char *url, char **sockaddr_url, char **sockaddr_port)
 
 	if (url_len < 1)
 		return false;
-	
+
 	/* Get rid of the [] */
 	if (ipv6_begin && ipv6_end && ipv6_end > ipv6_begin) {
 		url_len -= 2;
 		url_begin++;
 	}
-	
+
 	snprintf(url_address, 254, "%.*s", url_len, url_begin);
 
 	if (port_len) {
